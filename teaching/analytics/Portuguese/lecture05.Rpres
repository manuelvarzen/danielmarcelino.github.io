<style>
  .reveal pre {
    font-size: 13pt;
  }
  .reveal section p {
    font-size: 32pt;
  }
  .reveal div {
    font-size: 30pt;
  }
  .reveal h3 {
    color: #484848;
    font-weight: 150%;
  }
</style>

Lecture 5: Data summaries and standard graphics
====
author: 94-842
date: November 4, 2014
font-family: Garamond
autosize: false
width:1440
height:900

Agenda
====

- Summaries with the aggregate() function
- Standard graphics

Getting started: birthwt library
====
- We're going to start by operating on the `birthwt` dataset from the MASS library

- Let's get it loaded and see what we're working with

```{r}
library(MASS)
str(birthwt)
```

Renaming the variables
====
- The dataset doesn't come with very descriptive variable names

- Let's get better column names (use `help(birthwt)` to understand the variables and come up with better names)

```{r}
colnames(birthwt) 

# The default names are not very descriptive

colnames(birthwt) <- c("birthwt.below.2500", "mother.age", "mother.weight", 
    "race", "mother.smokes", "previous.prem.labor", "hypertension", "uterine.irr", 
    "physician.visits", "birthwt.grams")

# Better names!
```

Renaming the factors
====
- All the factors are currently represented as integers

- Let's use the `transform()` and `mapvalues()` functions to convert variables to factors and give the factors more meaningful levels 
```{r}
library(plyr)
birthwt <- transform(birthwt, 
            race = as.factor(mapvalues(race, c(1, 2, 3), 
                              c("white","black", "other"))),
            mother.smokes = as.factor(mapvalues(mother.smokes, 
                              c(0,1), c("no", "yes"))),
            hypertension = as.factor(mapvalues(hypertension, 
                              c(0,1), c("no", "yes"))),
            uterine.irr = as.factor(mapvalues(uterine.irr, 
                              c(0,1), c("no", "yes"))),
            birthwt.below.2500 = as.factor(mapvalues(birthwt.below.2500,
                              c(0,1), c("no", "yes")))
            )
```

Summary of the data
====
- Now that things are coded correctly, we can look at an overall summary

```{r}
summary(birthwt)
```

A simple table
====
- Let's use the `tapply()` function to see what the average birthweight looks like when broken down by race and smoking status

```{r}
with(birthwt, tapply(birthwt.grams, INDEX = list(race, mother.smokes), FUN = mean)) 
```

What if we wanted nicer looking output?
====
- Let's use the header `{r, results='asis'}`, along with the `kable()` function from the `knitr` library

<center>
```{r, results='asis'}
library(knitr)
kable(with(birthwt, tapply(birthwt.grams, INDEX = list(race, mother.smokes), FUN = mean)), format = "markdown")
```
</center>

- `kable()` outputs the table in a way that Markdown can read and nicely display

- Note: changing the CSS changes the table appearance

aggregate() function
====
- Let's first recall what `tapply()` does

- Command: `tapply(X, INDEX, FUN)` 
    - Applies `FUN` to `X` grouped by factors in `INDEX`
  
- **`aggregate()`** performs a similar operation, but presents the results in a form that is at times more convenient

- There are many ways to call the `aggregate()` function

- Analog of `tapply` call: `aggregate(X, by, FUN)` 
    - Here, `by` is exactly like `INDEX`
    
Example: tapply vs aggregate
====
```{r}
library(MASS)
with(birthwt, tapply(birthwt.grams, INDEX = list(race, mother.smokes), FUN = mean)) # tapply
with(birthwt, aggregate(birthwt.grams, by = list(race, mother.smokes), FUN = mean)) # aggregate
```

Example: different syntax
====
- Here's a convenient alternative way to call `aggregate`

- It uses the R `formula` syntax, which we'll learn more about when we discuss regression

```{r}
aggregate(birthwt.grams ~ race + mother.smokes, FUN=mean, data=birthwt)
```

- We'll see later that `aggregate` output can be more convenient for plotting

A closer look at low birth weight 
====
<center>
```{r}
weight.smoke.tbl <- with(birthwt, table(birthwt.below.2500, mother.smokes))
weight.smoke.tbl
```
</center>

- The odds of low bwt among non-smoking mothers is 

```{r} 
or.smoke.bwt <- (weight.smoke.tbl[2,2] / weight.smoke.tbl[1,2]) / (weight.smoke.tbl[2,1] / weight.smoke.tbl[1,1])
or.smoke.bwt
```

- So the odds of low birth weight are `r round(or.smoke.bwt, 1)` times higher when the mother smokes

continuted...
====

- Is the mother's age correlated with birth weight?

```{r}
with(birthwt, cor(birthwt.grams, mother.age))  # Calculate correlation
```

- Does this change when we account for smoking status?

```{r}
with(birthwt, cor(birthwt.grams[mother.smokes == "yes"], mother.age[mother.smokes == "yes"]))
```

```{r}
with(birthwt, cor(birthwt.grams[mother.smokes == "no"], mother.age[mother.smokes == "no"]))
```

Faster way: by() function
====
- Think of the `by(data, INDICES, FUN)` function as a `tapply()` function that operates on data frames instead of just vectors

- When using `tapply(X, INDEX, FUN)`, `X` is generally a numeric vector

- To calculate correlations, we need to allow `X` to be a data frame or matrix

```{r}
by(data = birthwt[c("birthwt.grams", "mother.age")], 
   INDICES = birthwt["mother.smokes"], 
   FUN = function(x) {cor(x[,1], x[,2])})
```



Graphics in R
====
- We now know a lot about how to tabulate data

- It's often easier to look at plots instead of tables

- We'll now talk about some of the standard plotting options

- Easier to do this in a live demo...

- Please refer to **.Rmd** version of lecture notes for the graphics material
<style>
  .reveal pre {
    font-size: 13pt;
  }
  .reveal section p {
    font-size: 32pt;
  }
  .reveal div {
    font-size: 30pt;
  }
  .reveal h3 {
    color: #484848;
    font-weight: 150%;
  }
</style>

Lecture 2: Importing data and more basics
====
author: 94-842
date: October 23, 2014
font-family: Garamond
autosize: false
width:1440
height:900

Agenda
====

- Live demo of RStudio and R Markdown

- Importing data

- Simple summaries of categorical and continuous data

- Coding style

- Homework 1 assigned, grading rubric

- Lab 2

Live demo
====
1. Starting an R Markdown (Rmd) file

2. Knitting to HTML

3. Editing code chunks

4. Sending code to the console

Importing data
====

- Start with survey results from "Homework 0"

- To import tabular data into R, we use the **`read.table()`** command

```{r}
survey <- read.table("http://www.andrew.cmu.edu/user/achoulde/94842/data/survey_data.csv", header=TRUE, sep=",")
```

- Let's parse this command one component at a time
  - The data is in a file called `survey_data.csv`, which is an online file
  - The file contains a `header` as its first row
  - The csv format means that the data is comma-separated, so `sep=","`

- Could've also used `read.csv()`, which is just `read.table()` with the preset `sep=","`

Exploring the data
====
- R imports data into a **`data.frame`** object
```{r}
class(survey)
```

- To view the first few rows of the data, use **`head()`**
```{r}
head(survey)
```

- `head(data.frame,n)` returns the first `n` rows of the data frame

- In the Console, you can also use **`View(survey)`** to get a spreadsheet view

Simple summary
====
- Use the `str()` function to get a simple summary of your data set

```{r}
str(survey)
```
<br>

- This says that TVhours is a numeric variable, while all the rest are factors (categorical)

Another simple summary
====

```{r}
summary(survey)
```

Data frame basics
====

- We will talk more about lists and data frames next week, so only give an intro here

- To see what an R object is made up of, you can use `attributes()`

```{r}
attributes(survey)
```

> An R **data frame** is a *list* whose columns you can refer to by *name* or *index*

Data frame dimensions
====
- We can use `nrow()` and `ncol` to determine the number of survey responses and the number of survey questions
```{r}
nrow(survey) # Number of rows (responses)
ncol(survey) # Number of columns (questions)
```
- When writing reports, you will often want to say how large your sample size was
- To do this *inline*, use the syntax:
```{r, eval=FALSE}
`r nrow(survey)`
```
- This allows us to write "`r nrow(survey)` students responded to the survey", and have the number displayed
  automatically change when `nrow(survey)` changes.

Inline code chunks example
====

- Here's a more complex example of inline code use.

```{r, eval=FALSE}
We collected data on `r ncol(survey)` survey questions from `r nrow(survey)` respondents.  Respondents represented `r length(unique(survey[["Program"]]))` Heinz College programs.  `r sum(survey[["Program"]] == "PPM")` of the repondents were from PPM.
```

- Which results in

> We collected data on `r ncol(survey)` survey questions from `r nrow(survey)` respondents.  Respondents represented `r length(unique(survey[["Program"]]))` Heinz College programs.  `r sum(survey[["Program"]] == "PPM")` of the repondents were from PPM.

<br>
- **IMPORTANT**: You are expected to use inline code chunks instead of copying and pasting output whenever possible.

Indexing data frames
====

- There are many different ways of indexing the same piece of a data frame
```{r}
survey[["Program"]]  # "Program" element
survey$Program # "Program" element
survey[,5] # Data from 5th column
```

More indexing
====
- Note that single brackets and double brackets have different effects
```{r}
survey[["Program"]]
survey["Program"] # sub-data frame containing only "Program"
```


Bar plot (categorical data)
====
<center>
```{r, fig.width=10, fig.height=8}
  plot(survey[["Program"]])
```
</center>

Histogram (continuous data)
====
<center>
```{r, fig.width=10, fig.height=8}
  hist(survey$TVhours, col="lightgray")
```
</center>

Indexing multiple columns
====

```{r}
head(survey[,c(4,5)]) # Data from 4th and 5th columns
head(survey[c("Editor", "Program")]) # Data from "Editor" and "Program"
```

Indexing rows and columns
====
- Data frames have two dimensions to index across

```{r}
survey[6,] # 6th row
survey[6,5] # row 6, column 5
survey[6, "Program"] # Program of 5th survey respondent
survey[["Program"]][6]
```

More indexing
====
- In Lab 1, you were introduced to the colon operator `:`

- We can use this operator for indexing

```{r}
survey[1:5,]  # equivalent to head(survey, 5)
survey[3:5, c(1,5)]
```

Subsets of data
====

- We are often interested in learning something a specific subset of the data

```{r}
survey[survey$Program=="MISM",] # Data from the MISM students
survey[which(survey$Program=="MISM"),] # Does the same thing
```

More subset examples
====

- Let's pull all of the PPM students who have never used R before

```{r}
survey[survey$Program=="PPM" & survey$Rexperience=="Never used",]
```

Cleaner subsetting
====

- When the subset conditions get long or messy, it is preferable to use the **`subset()`** function

- Here's an example of selecting the OperatingSystem and TVhours responses from all of the students who are either in PPM or HCPM and who listed their R experience as "Installed in machine".

```{r}
subset(survey, select=c("OperatingSystem", "TVhours"), subset=(Program == "PPM" | Program == "HCPM") & Rexperience == "Installed on machine")
```

Some simple calculations
====

```{r}
mean(survey$TVhours[survey$Program == "PPM"]) # Average time PPM's spent watching TV
mean(survey$TVhours[survey$Program == "MISM"]) # Average time MISM's spent watching TV
mean(survey$TVhours[survey$Program == "HCPM"]) # Average time HCPM's spent watching TV
```

- Later on we'll learn a better way of doing these types of calculations by using the **aggregate()** function.

Defining variables
====

- If we wanted to focus on a particular column of the data frame, we could always define it as a new variable

```{r}
tv.hours <- survey$TVhours
mean(tv.hours)
sd(tv.hours)
tv.hours >= 5
sum(tv.hours >= 5)
```

R coding style
====

- Coding style (and code commenting) will become increasingly more important as we get into more advanced and involved programming tasks

- A few R "style guides" exist:
    - [Google's](https://google-styleguide.googlecode.com/svn/trunk/Rguide.xml)
    - [Hadley Wickham's](http://r-pkgs.had.co.nz/style.html)

- Borrowing Hadley Wickham's words:
> You donâ€™t have to use my style, but you really should use a **consistent** style.

R style recommendations
====

- [Hadley Wickham's](http://r-pkgs.had.co.nz/style.html) guide is short and easy to follow

- The [`formatR`](http://yihui.name/formatR/) package can be used to automatically tidy up messy source code

- We'll revisit the question of coding style several times over the course of the class

Enforced style: Assignment operator
====

**Assignment operator**.  USE **`<-`**

```{r, eval=FALSE}
student.names <- c("Eric", "Hao", "Jennifer")  # Good
student.names = c("Eric", "Hao", "Jennifer") # Bad
```

- Note: When specifying function arguments, only `=` is valid

```{r, eval=FALSE}
sort(tv.hours, decreasing=TRUE) # Good
sort(tv.hours, decreasing<-TRUE) # Bad!!
```

Enforced style: Spacing
====

- Binary operators should have spaces around them

- Commas should have a space after, but not before (just like in writing)

```{r, eval=FALSE}
3 * 4 # Good
3*4 # Bad
which(student.names == "Eric") # Good
which(student.names=="Eric") # Bad
```

- For specifying arguments, spacing around `=` is optional

```{r, eval=FALSE}
sort(tv.hours, decreasing=TRUE) # Accepted
sort(tv.hours, decreasing = FALSE) # Accepted
```

Enforced style: Variable names
====

- To make code easy to read, debug, and maintain, you should use **concise** but **descriptive** variable names

- Terms in variable names should be separated by `_` or `.`

```{r, eval=FALSE}
# Accepted
day_one   day.one   day_1   day.1   day1

# Bad
d1   DayOne   dayone

# Can be made more concise:
first.day.of.the.month
```

- Avoid using variable names that are already pre-defined in R
```{r, eval=FALSE}
# EXTREMELY bad:
c   T   pi   sum   mean
```

Assignments
====

- **Homework 1** has been posted to the course website
  - **Due: Thursday, October 30, 4:30pm**
  - Submit your .Rmd file on Blackboard
  - Course website contains grading rubric

- **Lab 2** has been posted to the course website
  - Submit your .Rmd file on Blackboard by **11:59pm tonight**
  - Remember: You'll earn 1 full participation point for submitting an Rmd file even if you've made no progress on the lab.